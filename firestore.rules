rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // ONLY allow writes from authenticated Cloud Functions for user profile data
      // This relies on the Callable function being properly secured.
      // Direct client writes would be very restricted.
      allow create: if request.auth != null && request.auth.uid == userId; // Allow initial creation by self
      allow update: if request.auth != null && request.auth.uid == userId && (
                      // Allow updates to specific safe fields directly by user
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                        'lastLoginAt', 'phoneNumber', 'address', 'displayName', 'photoURL',
                        'favoriteSalons' // Assuming users can update favorites themselves
                      ]) ||
                      // Deny client from directly changing role, ownedSalons, associatedSalons
                      // These should only be modified by Cloud Functions or admin panels.
                      false
                   );
      // Or, if *all* updates go through a Cloud Function:
      // allow update: if false; // Deny all direct client updates to the user profile document after creation
                              // and rely solely on the `updateUserProfile` callable function.
                              // This is generally the most secure approach for complex profile updates.
    }
  }
}